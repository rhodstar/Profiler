# Generation of Kubernetes YAML is still under development!
#
# Save the output of this file and use kubectl create -f to import
# it into Kubernetes.
#
# Created with podman-3.3.1
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2021-11-26T07:34:33Z"
  labels:
    app: profiler-pod
  name: profiler-pod
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - set -xe; python manage.py migrate --noinput; gunicorn profiler.wsgi:application
    env:
    - name: PORT
      value: "8000"
    - name: PROFILER_DATABASE_PORT
      value: "5432"
    - name: PYTHON_VERSION
      value: 3.8.1
    - name: PROFILER_SECRET_KEY
      value: django-insecure-$3ht*5ycxihvpd9%d-a2kf0$ugyh2w)2ym5vrs@21%+pt)zxvq
    - name: PROFILER_ALLOWED_HOSTS
      value: '[''*'']'
    - name: DJANGO_ENV
      value: dev
    - name: PROFILER_DEBUG
      value: "True"
    - name: PROFILER_DATABASE_NAME
      value: profilerdb
    - name: PROFILER_DATABASE_PASSWORD
      value: admin
    - name: PYTHONUNBUFFERED
      value: "1"
    - name: PROFILER_DATABASE_USER
      value: dbuser
    - name: PROFILER_DATABASE_HOST
      value: 127.0.0.1
    image: localhost/python-django:latest
    name: profiler-app
    ports:
    - containerPort: 5432
      hostPort: 5432
      protocol: TCP
    - containerPort: 8000
      hostPort: 8000
      protocol: TCP
    - containerPort: 443
      hostPort: 443
      protocol: TCP
    - containerPort: 80
      hostPort: 80
      protocol: TCP
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
      runAsGroup: 1000
      runAsUser: 1000
      seLinuxOptions: {}
    workingDir: /app
  - args:
    - postgres
    command:
    - docker-entrypoint.sh
    env:
    - name: LANG
      value: en_US.utf8
    - name: PGDATA
      value: /var/lib/postgresql/data
    - name: POSTGRES_DB
      value: profilerdb
    - name: POSTGRES_USER
      value: dbuser
    - name: POSTGRES_PASSWORD
      value: admin
    image: docker.io/library/postgres:latest
    name: pgdb
    resources: {}
    securityContext:
      allowPrivilegeEscalation: true
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
      privileged: false
      readOnlyRootFilesystem: false
      seLinuxOptions: {}
    volumeMounts:
    - mountPath: /var/lib/postgresql/data
      name: lv-database-efrfar-host-0
    workingDir: /
  dnsConfig: {}
  restartPolicy: Always
  volumes:
  - hostPath:
      path: /lv-database-efrfar
      type: Directory
    name: lv-database-efrfar-host-0
status: {}

